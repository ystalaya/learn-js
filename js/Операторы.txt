_______________________________
оператор сложения строк, бинарны  + 
+ складывает числа,
+ складывает если хотя бы один из операндов является строкой
еще преобразует нечиисла в числа, как number()
// Преобразует нечисла в числа
alert( +true ); // 1
alert( +"" );   // 0
_______________________
унарный +, преобразует строки в числа, бинарный + их сложит
В том случае, если в выражении есть несколько операторов – 
порядок их выполнения определяется приоритетом, или, другими словами, 
существует определённый порядок выполнения операторов.

______________________
= -присваивание 

присваивание по цепочке 
let a, b, c;

a = b = c = 2 + 2;

alert( a ); // 4
alert( b ); // 4
alert( c ); // 4
______________________
Остаток от деления %
Оператор взятия остатка %, несмотря на обозначение, никакого отношения к процентам не имеет.

Его результат a % b – это остаток от деления a на b.

Например:

alert( 5 % 2 ); // 1, остаток от деления 5 на 2
alert( 8 % 3 ); // 2, остаток от деления 8 на 3
alert( 6 % 3 ); // 0, остаток от деления 6 на 3
______________________

Возведение в степень **
Оператор возведения в степень ** недавно добавили в язык.

Для натурального числа b результат a ** b равен a, умноженному на само себя b раз.

Например:

alert( 2 ** 2 ); // 4  (2 * 2)
Оператор работает и для нецелых чисел.

Например:

alert( 4 ** (1/2) ); // 2 

_______________________
Инкремент/декремент

Инкремент/декремент можно применить только к переменной. 

Одной из наиболее частых операций в JavaScript, 
как и во многих других языках программирования, 
является увеличение или уменьшение переменной на единицу.

Для этого существуют даже специальные операторы:

Инкремент ++ увеличивает на 1:

let counter = 2;
counter++;        // работает как counter = counter + 1,
 просто запись короче
alert( counter ); // 3
Декремент -- уменьшает на 1:

let counter = 2;
counter--;        // работает как counter = counter - 1, 


просто запись короче
alert( counter ); // 1

let counter = 1;
let a = ++counter; // (*)

alert(a); // 2
\\\\\
let counter = 1;
let a = counter++; // (*) меняем ++counter на counter++

alert(a); // 1

_______________________
Побитовые операторы

AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
_______________________
Сокращённая арифметика с присваиванием
let n = 2;
n += 5; // теперь n=7 (работает как n = n + 5)
n *= 2; // теперь n=14 (работает как n = n * 2)

alert( n ); // 14
_______________________
Оператор запятая
Оператор запятая позволяет нам возмжность вычилять несколько выражений,
 разделяя их запятой ,. 
Каждое выражение выполняется, но возвращается результат только последнего.

// три операции в одной строке
for (a = 1, b = 3, c = a * b; a < 10; a++) {
 ...
}
Запятая имеет низкий приоритет
_______________
решения 
Чему будут равны переменные a, b, c и d в примере ниже?

let a = 1, b = 1;

let c = ++a; // ?
let d = b++; // ?
решение
Ответ:

a = 2
b = 2
c = 2
d = 1

