JS - динамически типизированный язык.
Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.
В JS 8 основных типов.
____________
Число
let n = 123;
n = 12.345;

Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.

Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
Мы можем получить его в результате деления на ноль:
alert( 1 / 0 ); // Infinity
NaN означает вычислительную ошибку. ( к примеру деление строкового значение на 2)
Любая операция с NaN возвращает NaN
В js  математические операции безопасны, ошибки не будет будет NaN

_____________
BigInt

Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.
Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:

// символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n;

______________
Строка 

Строка (string) в JavaScript должна быть заключена в кавычки.

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

Обратные кавычки же имеют «расширенную функциональность». Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:

let name = "Иван";

// Вставим переменную
alert( `Привет, ${name}!` ); // Привет, Иван!

______________
Булевый (логический) тип

Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).
______________
Значение «null»

Специальное значение null не относится ни к одному из типов, описанных выше.

Оно формирует отдельный тип, который содержит только значение null:

let age = null;
В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.

Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
______________
Значение «undefined»

Оно означает, что «значение не было присвоено».
Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:

let x;

alert(x); // выведет "undefined"

null используется для присвоения переменной «пустого» или «неизвестного» значения, а undefined – для проверок, была ли переменная назначена.
______________
Объекты и символы

Тип object (объект) – особенный.
Объекты же используются для хранения коллекций данных или более сложных объектов.
Тип symbol (символ) используется для создания уникальных идентификаторов объектов.

______________
Оператор typeof 

Оператор typeof возвращает тип аргумента. Это полезно, когда мы хотим обрабатывать значения различных типов по-разному

У него есть два синтаксиса:

Синтаксис оператора: typeof x.
Синтаксис функции: typeof(x).
Вызов typeof x возвращает строку с именем типа:
typeof 0 // "number"
_______________________
Коротко о каждом : 

number для любых чисел: целочисленных или чисел с плавающей точкой, целочисленные значения ограничены диапазоном ±253.
bigint для целых чисел произвольной длины.
string для строк. Строка может содержать один или больше символов, нет отдельного символьного типа.
boolean для true/false.
null для неизвестных значений – отдельный тип, имеющий одно значение null.
undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
object для более сложных структур данных.symbol для уникальных идентификаторов.
Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной
________________________

