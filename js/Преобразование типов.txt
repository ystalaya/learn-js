Строковое преобразование
Например, alert(value) преобразует значение к строке.

Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке:

let value = true;
alert(typeof value); // boolean

value = String(value); // теперь value это строка "true"
alert(typeof value); // string
_________________________________________________
Численное преобразование

Например, когда операция деления / применяется не к числу:

alert( "6" / "2" ); // 3, Строки преобразуются в числа
Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу:

let str = "123";
alert(typeof str); // string

let num = Number(str); // становится числом 123

alert(typeof num); // number

Примеры:

alert( Number("   123   ") ); // 123
alert( Number("123z") );      // NaN (ошибка чтения числа в "z")
alert( Number(true) );        // 1
alert( Number(false) );       // 0
Учтите, что null и undefined ведут себя по-разному. Так, null становится нулём, тогда как undefined приводится к NaN.
__________________________________________________
Логическое преобразование

роисходит в логических операторах (позже мы познакомимся с подобными конструкциями), но также может быть выполнено явно с помощью функции Boolean(value).

Правило преобразования:

Значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false.
Все остальные значения становятся true.
Например:

alert( Boolean(1) ); // true
alert( Boolean(0) ); // false

alert( Boolean("Привет!") ); // true
alert( Boolean("") ); // false
__________________________________________________
Итого
Существует 3 наиболее широко используемых преобразований: строковое, численное и логическое.

Строковое – Происходит, когда нам нужно что-то вывести. Может быть вызвано с помощью String(value). Для примитивных значений работает очевидным образом.

Численное – Происходит в математических операциях. Может быть вызвано с помощью Number(value).

Логическое – Происходит в логических операторах. Может быть вызвано с помощью Boolean(value).
________
задание |
________|

1) 10
2) -10
3)  хз 
4) 2 
5) 6
6) 45px
7) $45

"" + 1 + 0	10	+	
"" - 1 + 0	-10	+
true + false	1+0	+
6 / "3"		2	+
"2" * "3"	6	+	
4 + 5 + "px"	45px	- 9px
"$" + 4 + 5	$45	+
"4" - 2		2	+
"4px" - 2	3px	- NaN	
7 / 0		null	- Infinity
"  -9  " + 5	-4	- " -9 5"
"  -9  " - 5	-14	+
null + 1	0	- 1
undefined + 1		- NaN
" \t \n" - 2	\t \n 	

Сложение со строкой "" + 1 преобразует 1 к строке: "" + 1 = "1", и в следующем случае "1" + 0, работает то же самое правило.
Вычитание - (как и большинство математических операторов) работает только с числами, пустая строка "" приводится к 0.
Сложение со строкой превращает число 5 в строку и добавляет к строке.
Вычитание всегда преобразует к числу, значит строка " -9 " становится числом -9 (пробелы по краям обрезаются).
null становится 0 после численного преобразования.
undefined становится NaN после численного преобразования.
Пробельные символы, такие как \t и \n по краям строки игнорируются при преобразовании в число, так что строка \t \n, аналогично пустой строке,
 становится 0 после численного преобразования.